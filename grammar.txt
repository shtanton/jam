expr ->
	| INTEGER
	| FLOAT
	| STRING
	| IDENTIFIER
	| [ type NUMBER array_values ]
	| { type record_values }
	| ( LET [ defns ] expr )
	| ( FN [ params ] type expr )
	| ( IMPORT STRING )
	| ( VALUEOF type )
	| ( ITE expr expr expr )
	| ( expr args )

type ->
	| IDENTIFIER
	| { record_types }
	| ( LET [ type_defns ] type )
	| ( FN [ type_params ] anytype type )
	| ( [ param_types ] type )
	| ( IMPORT STRING )
	| ( TYPEOF expr )
	| ( ITE type type type )
	| ( type type_args )

defns ->
	|
	| ( IDENTIFIER type expr ) defns
	| ( IDENTIFIER type type ) defns

params ->
	|
	| ( IDENTIFIER type ) params

// Array values can't be types as this would require using types at indices to make sense
array_values ->
	|
	| expr array_values

record_values ->
	|
	| IDENTIFIER expr record_values
	| IDENTIFIER type record_values

args ->
	|
	| expr args

record_types ->
	|
	| IDENTIFIER type record_types

type_defns ->
	|
	| ( IDENTIFIER anytype type ) type_defns

type_params ->
	|
	| ( IDENTIFIER type ) type_params

type_args ->
	|
	| type args
