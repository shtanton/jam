Week 1:
Robustness is a very important part of programming, formal verification is hard probably (TODO is it?)
Curry-Howard-Lambek correspondence - already a thing in haskell, can prove things with first order logic
- A type is equivalent to a logical expression and a value of the type is a proof of that expression
- Can only do propositional logic
Intuitionistic type theory is dependent types which is what idris uses
- Isomorphic to first or second (TODO) order logic
- Very different to assembly types
- Types like tuples and functions can have the types of later parts dependent on the values of earlier parts
Simply typed lambda calculus:
- All constructed types are functions
- Church encodings don't map very well to assembly
System F:
- Passing types around like values is intuitive and easy to grasp
- Still not a good map to assembly
Refinement types:
- Not part of the lambda cube
- Maps very well to assembly

SMT:
- Will use theories of: bitvectors, arrays, algebraic datatypes, structs
- bitvectors for ints and floats
- float bitvectors use IEEE 754 standard. LLVM also needs to use IEEE in order to be correct. I think it does since all modern widely used CPUs use IEEE and that's what LLVM will compile into
- Arrays are mutable, similar to ocaml. They compile to just pointers as in C. They have a fixed length
- Lists can be constructed from algebraic datatypes and will be in the standard library
- Structs will be completely abstracted by the compiler so Z3 doesn't care about them particularly

Implementation details:
- Types can't be recursive unless they involve a pointer

Suppose I want to assign a value of type v to a variable of type t. Assume both are ints with predicates v and t respectively in Z3:
(declare-const x Int)
(assert (v x))
(assert (forall ((y Int))
	(or (t y) (not (= y x)))))
(check-sat)
Will be unsat if the assignment is valid, or sat if not and the model for sat is a value which the value could be but the type can't take so is useful for the compilers error message
These predicates will take the form of a bunch of existential quantifiers, and then an expression with no quantifiers.
These will need to be translated to Z3, all the existential quantifiers are effectively a variable in the sat code and the negation makes them all universal quantifiers so each is a variable in the forall assertion

Investigation:
- Idris, Coq
- Limits of each SMT theory
- Advantages over other CAFV methods
https://nikita-volkov.github.io/refined/
- Papers on refinement types
--- Write a grammar
- Reduction relations
--- Typing rules
- Explain how types are refined in a new way
- Look at F* and similarities and differences

Jam wants to use an advanced type theory but not abstract too far from llvm bytecode.
Thus it sits close to lambda C but additional restrictions can be put in place to only allow binding to a certain supertype.
This is how refinement type functionality is achieved.
This hopefully is very intuitive as all this can be achieved simply by making types like values.
The challenge is to be functional while still keeping the mapping to llvm simple.
Complex code has a lot of bugs, so part of making jam robust is keeping the compilation process simple and predictable.
It should be possible to step through the llvm bytecode in order to debug it and see what maps to what.
It will also have eager evaluation which makes side effects easy to implement.

Polymorphism can be done either by passing types as parameters, or by allowing a parameter to be of any type, with a variable taking whatever type it has, and only allowing access to that variable inside a block where the type is constrained
x:$xt -> xt: match xt {
	int -> x * 2,
	bool -> true,
}

I tried to implement the typing rules as they are, but found that they are undecidable, thus I chose to reduce the type checking to logic which is then handled by an SMT solver.
When translating to SMT anonymous functions, pairs, functional parameters and returning function values aren't possible in Z3 so I use lambda lifting, some pair mapping thing, specialization and uncurrying to remove them without changing the semantics of the program.

Defunctionalising doesn't work because quantifier variables can be functions which could be arguments which I couldn't find a way to remove.

Henkin semantics might be a formal definition of the classical logic I'm using

Answers:
- compilers: Appel
- Gather list of clever implementation details
- Microsoft FPC calculus
- PCF calculi. Find one with refinements
- LLVM correctness simply typed lambda caclulus
- Understand operational semantics in thesis P 199-202
- Do call by name

Links that may contain a calculus:
https://prosecco.gforge.inria.fr/personal/hritcu/students/alejandro/report.pdf
http://noamz.org/oplss16/refinements-notes.pdf
https://www.researchgate.net/publication/2387186_Refinement_Types_for_Specification
https://www.lfcs.inf.ed.ac.uk/reports/99/ECS-LFCS-99-412/ECS-LFCS-99-412.pdf Denney 1998
https://www.researchgate.net/profile/Ewen_Denney/publication/2406398_Refining_Refinement_Types/links/56d3210e08ae059e376122e4.pdf Denney 1997
https://link.springer.com/chapter/10.1007/978-0-387-35358-6_13 Denney in a book
https://digitalcollections.ohsu.edu/concern/etds/5d86p055p?locale=en
https://ezproxy-prd.bodleian.ox.ac.uk:2120/content/pdf/10.1007/s10817-007-9085-y.pdf Translating HOL to FOL
http://theory.stanford.edu/~barrett/pubs/BREO+19.pdf Extending SMT to HOL
https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.232.1234&rep=rep1&type=pdf Extending sledgehammer with SMT solvers
https://hokstad.com/how-to-implement-closures
http://goto.ucsd.edu/~rjhala/papers/real_world_liquid.pdf
